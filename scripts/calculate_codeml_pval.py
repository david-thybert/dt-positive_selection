
import argparse 
from scipy.stats.distributions import chi2


"""
This script calculate a pvalue that a gene is positively selcted using the Branch model from paml. We need to provide 
as input of this script the cdt files produced during the evaluation of the null and alternative models using codeml.

command:

    python calculate_codeml_pval.py --alt_codeml <alt model cdt file> --null_codeml <nuc null model cdt file> --out <output file>

"""



def parse_codeml_output(ctd_file:str)-> dict:
    """ 
    This function parse the CTD file generated by codeml and retrieve the w 
    information for the different classes, and the likelihood informaitons to 
    calculate the pvalue

    :param ctd_file: path tot he CTD file.
    :return : dictionary    {"np" : value used to calulate the degree of freedome for LRT test
                            "log_lh": the log likelihood of the model
                            "back_w_0": w for class 0 in background
                            "back_w_1": w for class 1 in background
                            "back_w_2a": w for class 2a in background
                            "back_w_2b": w for class 2b in background
                            "fore_w_0": w for class 0 in foregournd
                            "fore_w_1": w for class 1 in foregournd
                            "fore_w_2a": w for class 2a in foregournd
                            "fore_w_2b": w for class 2b in foregournd
                            "pp_sites" : list of positive selcted "pos:score|pos:score|..."}
    """
    result = {}
    with open(ctd_file) as file_hanlder:
        lines = file_hanlder.readlines()

    state = 0
    pp_sites = ""
    for line in lines:
        if state == 0:
            if "lnL(" in line: # likelihood line
                np = int(line.split(")")[0].split(":")[-1])
                result["np"] = np
                log_lh = float(line.split(":")[-1].strip().split()[0])
                result["log_lh"] = log_lh
            elif  "background w" in line:
                back_w_0 = float(line.split()[2])
                result["back_w_0"] = back_w_0
                back_w_1 = float(line.split()[3])
                result["back_w_1"] = back_w_1
                back_w_2a = float(line.split()[4])
                result["back_w_2a"] = back_w_2a
                back_w_2b = float(line.split()[5])
                result["back_w_2b"] = back_w_2b
            elif  "foreground w " in line:
                fore_w_0 = float(line.split()[2])
                result["fore_w_0"] = fore_w_0
                fore_w_1 = float(line.split()[3])
                result["fore_w_1"] = fore_w_1
                fore_w_2a = float(line.split()[4])
                result["fore_w_2a"] = fore_w_2a
                fore_w_2b = float(line.split()[5])
                result["fore_w_2b"] = fore_w_2b
            elif "Positive sites for foreground lineages Prob(w>1):" in line:
                state = 1
        elif state == 1:
            pos_elem = line.lstrip().rstrip().split()
            if pos_elem == []:
                state = 0
            else:
                if pp_sites == "":
                    pp_sites = f"{pos_elem[0]}:{pos_elem[-1]}"
                else:
                    pp_sites = f"{pp_sites}|{pos_elem[0]}:{pos_elem[-1]}"
    result["pp_sites"] = pp_sites
    return result

def main(alt_codeml_file:str, null_codeml_file:str, out_file:str)->None:
    """
    Main funciton fo the script

    :param alt_codeml_file: path to the CDT file for the alternative model
    :param null_codeml_file: path to the CDT file for the null model
    :param out_file: path to the outfile
    """
    
    # parse results from file
    alt_codeml = parse_codeml_output(alt_codeml_file)
    null_codeml = parse_codeml_output(null_codeml_file)

    # calculate pval that alternative model is more likely
    df  = alt_codeml["np"] - null_codeml["np"]
    delta_lrt = 2*(alt_codeml["log_lh"] - null_codeml["log_lh"]) 
    pval =  chi2.sf(delta_lrt, df)

    # get the gene id fomr the file name
    gene_id = alt_codeml_file.split("/")[-1].split(".alt")[0]
    
    # save output
    header = "gene_id\tlrt\tpval\talt_w_0\talt_w_1\talt_w_2a\talt_w_2b\tnull_w_0\tnull_w_1\tnull_w_2a\tnull_w_2b\tpositions"
    line = f"{gene_id}\t{delta_lrt}\t{pval}\t{alt_codeml['fore_w_0']}\t{alt_codeml['fore_w_1']}\t{alt_codeml['fore_w_2a']}\t{alt_codeml['fore_w_2b']}"
    line = line + f"\t{null_codeml['fore_w_0']}\t{null_codeml['fore_w_1']}\t{null_codeml['fore_w_2a']}\t{null_codeml['fore_w_2b']}\t{alt_codeml['pp_sites']}"

    with open(out_file, "w") as file_handler:
        file_handler.write(f"{header}\n")
        file_handler.write(f"{line}\n")

########################################################################################
########### Main script
########################################################################################


parser = argparse.ArgumentParser(description='Script parsing teh output of ctd file and calulating the pval for positive selction')
parser.add_argument('--alt_codeml',type=str, help='path to the CDT file for the alternative model')
parser.add_argument('--null_codeml', type=str, help='tpath to the CDT file for the null model')
parser.add_argument('--out', type=str, help='path to the output file')

args = parser.parse_args()
main(args.alt_codeml, args.null_codeml,args.out)