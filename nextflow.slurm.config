process {
    executor = 'slurm'
    
    withName: Batch_orthogroup{
        cpus = 1
        memory = '1 GB'
        time = '5m'
    }

    withName: FormatFasta {
        cpus = 1
	memory = '1 GB'
	time = '5m'
    }

    withName: AlignSequence {
        cpus = 1
	errorStrategy = 'retry'
	maxRetries = 3
	//memory = '1 GB'
	memory = {1.GB * task.attempt}
	time = {5.minute * task.attempt}

    }

    withName: FilterNonConfidentColumns {
        cpus = 1 
        memory = {1.GB * task.attempt}
	time = {5.minute * task.attempt}
	//errorStrategy = 'ignore'
	errorStrategy = { task.exitStatus == 140 ? 'retry' : 'ignore' }
	maxRetries = 3

    }

    withName: PepAli_2_DNAAli{
        cpus: 1
        memory = '1 GB'
        time = '2m'
    }

    withName: ExtractFourFoldDegeSites{
        cpus: 1
        memory = '1 GB'
        time = '2m'
	errorStrategy = { task.exitStatus == 140 ? 'retry' : 'ignore' }
    }

    withName: RaxmlPhylogeny{
        cpus: 1
        memory = '1 GB'
        time = '5m'
    }

   withName: TestSaturation{
        cpus: 1
        memory = '1 GB'
        time = '5m'
    }

   withName: TagForgroundInTree{
        cpus: 1
        memory = '1 GB'
        time = '5m'
    }

   withName: PositiveSelectionABSREL{
        cpus: 1
        memory = '1 GB'
        time = '5m'
    }

   withName: CombinePosselInfoABSREL{
        cpus: 1
        memory = '1 GB'
        time = '5m'
    }    
   
   withName: FlushChanelToFile{
	cpus: 1
	memory = '1 GB'
	time = '5m'
   } 
   withName: Fasta2Phylip{
        cpus: 1
        memory = '1 GB'
        time = '5m'
    }
   
   withName: Fasta2Phylip{
        cpus: 1
        memory = '1 GB'
        time = '5m'
   }
   
   withName: CreateCTLFile_null{
       cpus: 1
       memory = '1 GB'
       time = '5m'
   }
  
   withName: RunCodeML_null{
       cpus: 1
       memory = {1.GB * task.attempt}
       time = {10.minute * task.attempt}
       errorStrategy = { task.exitStatus == 140 ? 'retry' : 'ignore' }
       maxRetries = 3
   }

   withName: CreateCTLFile_alt{
       cpus: 1
       memory = '1 GB'
       time = '5m'
   }

   withName: RunCodeML_alt{
       cpus: 1
       memory = '1 GB'
       time = '5m'
       memory = {1.GB * task.attempt}
       time = {10.minute * task.attempt}
       errorStrategy = { task.exitStatus == 140 ? 'retry' : 'ignore' }
       maxRetries = 3	
   }

   withName: CalculateCodemlPval{
       cpus: 1
       memory = '1 GB'
       time = '5m'
   }

   withName: CombinePosselInfoPML_BRST{
       cpus: 1
       memory = '1 GB'
       time = '5m'
   }



}
